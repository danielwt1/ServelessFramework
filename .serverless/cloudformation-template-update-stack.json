{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GetDynamoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lmabda-authorizer-dev-getDynamo"
      }
    },
    "PostDynamoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lmabda-authorizer-dev-postDynamo"
      }
    },
    "PutDynamoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lmabda-authorizer-dev-putDynamo"
      }
    },
    "AuthorizerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lmabda-authorizer-dev-authorizer"
      }
    },
    "DeleteDynamoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/aws-lmabda-authorizer-dev-deleteDynamo"
      }
    },
    "EnterpriseLogAccessIamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "arn:aws:iam::802587217904:root"
              },
              "Action": "sts:AssumeRole",
              "Condition": {
                "StringEquals": {
                  "sts:ExternalId": "ServerlessEnterprise-8a44af7d-9720-4d3d-86da-00b9f5a6deaf"
                }
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "LogFilterAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:FilterLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "GetDynamoLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "PostDynamoLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "PutDynamoLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AuthorizerLogGroup",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "DeleteDynamoLogGroup",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "GetDynamoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lmabda-authorizer/dev/1697725885846-2023-10-19T14:31:25.846Z/aws-lmabda-authorizer.zip"
        },
        "Handler": "s_getDynamo.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-lmabda-authorizer-dev-getDynamo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::545770966230:role/service-role/DynamoGetData-role-gcjrqw8a"
      },
      "DependsOn": [
        "GetDynamoLogGroup"
      ]
    },
    "PostDynamoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lmabda-authorizer/dev/1697725885846-2023-10-19T14:31:25.846Z/aws-lmabda-authorizer.zip"
        },
        "Handler": "s_postDynamo.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-lmabda-authorizer-dev-postDynamo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::545770966230:role/service-role/PostLambda-role-ffhidh7f"
      },
      "DependsOn": [
        "PostDynamoLogGroup"
      ]
    },
    "PutDynamoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lmabda-authorizer/dev/1697725885846-2023-10-19T14:31:25.846Z/aws-lmabda-authorizer.zip"
        },
        "Handler": "s_putDynamo.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-lmabda-authorizer-dev-putDynamo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::545770966230:role/service-role/UpdateLambda-role-n2ust3a5"
      },
      "DependsOn": [
        "PutDynamoLogGroup"
      ]
    },
    "AuthorizerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lmabda-authorizer/dev/1697725885846-2023-10-19T14:31:25.846Z/aws-lmabda-authorizer.zip"
        },
        "Handler": "s_authorizer.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-lmabda-authorizer-dev-authorizer",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::545770966230:role/ExecutrionRoleLambda"
      },
      "DependsOn": [
        "AuthorizerLogGroup"
      ]
    },
    "DeleteDynamoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/aws-lmabda-authorizer/dev/1697725885846-2023-10-19T14:31:25.846Z/aws-lmabda-authorizer.zip"
        },
        "Handler": "s_deleteDynamo.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "aws-lmabda-authorizer-dev-deleteDynamo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": "arn:aws:iam::545770966230:role/service-role/DeleteDynamoLambda-role-xz9mhcqd"
      },
      "DependsOn": [
        "DeleteDynamoLogGroup"
      ]
    },
    "GetDynamoLambdaVersionGdbPpRlAxcWqAXCUWbfgDqERCbiDlxkN0FKDDWO2Yk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetDynamoLambdaFunction"
        },
        "CodeSha256": "e0NRsmh/q70ziTWr8DMasJyIQjJwI256sl8xkzVyGyc="
      }
    },
    "PostDynamoLambdaVersionUlmezxXP1R5QXxkSLTDGdw4i6S8CHnxBf2DGxeO8kqI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PostDynamoLambdaFunction"
        },
        "CodeSha256": "e0NRsmh/q70ziTWr8DMasJyIQjJwI256sl8xkzVyGyc="
      }
    },
    "PutDynamoLambdaVersionaR0kE9ac0PnUhKdMIr7LUfNZSQOTjQF09Lyu7lpb9mU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PutDynamoLambdaFunction"
        },
        "CodeSha256": "e0NRsmh/q70ziTWr8DMasJyIQjJwI256sl8xkzVyGyc="
      }
    },
    "AuthorizerLambdaVersionIFe963PvO1B35ng97VVynPpTJSchnWBZZrlKWOTAU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AuthorizerLambdaFunction"
        },
        "CodeSha256": "e0NRsmh/q70ziTWr8DMasJyIQjJwI256sl8xkzVyGyc="
      }
    },
    "DeleteDynamoLambdaVersionemkYR7SocJJR6ZeekzHY8pqkpH862yyGD6PCnt2sI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteDynamoLambdaFunction"
        },
        "CodeSha256": "e0NRsmh/q70ziTWr8DMasJyIQjJwI256sl8xkzVyGyc="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-aws-lmabda-authorizer",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/http-api/aws-lmabda-authorizer-dev"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        },
        "AccessLogSettings": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "HttpApiLogGroup",
              "Arn"
            ]
          },
          "Format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourcePath\":\"$context.routeKey\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"stage\":\"$context.stage\",\"status\":\"$context.status\",\"integrationStatus\":\"$context.integrationStatus\",\"integrationLatency\":\"$context.integrationLatency\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_HTTP_API_LOG\",\"version\":\"1.0.0\"}"
        }
      },
      "DependsOn": "HttpApiLogGroup"
    },
    "CustomAuthLambdaAuthorizerPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AuthorizerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiAuthorizerCustomAuth": {
      "Type": "AWS::ApiGatewayV2::Authorizer",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "Name": "customAuth",
        "IdentitySource": [],
        "AuthorizerType": "REQUEST",
        "AuthorizerPayloadFormatVersion": "2.0",
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": [
                  "AuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "/invocations"
            ]
          ]
        }
      }
    },
    "GetDynamoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetDynamoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetDynamo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetDynamoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGet": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetDynamo"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCustomAuth"
        }
      },
      "DependsOn": "HttpApiIntegrationGetDynamo"
    },
    "PostDynamoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PostDynamoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationPostDynamo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "PostDynamoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePost": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationPostDynamo"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCustomAuth"
        }
      },
      "DependsOn": "HttpApiIntegrationPostDynamo"
    },
    "PutDynamoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PutDynamoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationPutDynamo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "PutDynamoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePut": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationPutDynamo"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCustomAuth"
        }
      },
      "DependsOn": "HttpApiIntegrationPutDynamo"
    },
    "DeleteDynamoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteDynamoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteDynamo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteDynamoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDelete": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteDynamo"
              }
            ]
          ]
        },
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerCustomAuth"
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteDynamo"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-aws-lmabda-authorizer-dev-ServerlessDeploymentBucketName"
      }
    },
    "EnterpriseLogAccessIamRole": {
      "Value": {
        "Fn::GetAtt": [
          "EnterpriseLogAccessIamRole",
          "Arn"
        ]
      },
      "Export": {
        "Name": "sls-aws-lmabda-authorizer-dev-EnterpriseLogAccessIamRole"
      }
    },
    "GetDynamoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetDynamoLambdaVersionGdbPpRlAxcWqAXCUWbfgDqERCbiDlxkN0FKDDWO2Yk"
      },
      "Export": {
        "Name": "sls-aws-lmabda-authorizer-dev-GetDynamoLambdaFunctionQualifiedArn"
      }
    },
    "PostDynamoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PostDynamoLambdaVersionUlmezxXP1R5QXxkSLTDGdw4i6S8CHnxBf2DGxeO8kqI"
      },
      "Export": {
        "Name": "sls-aws-lmabda-authorizer-dev-PostDynamoLambdaFunctionQualifiedArn"
      }
    },
    "PutDynamoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PutDynamoLambdaVersionaR0kE9ac0PnUhKdMIr7LUfNZSQOTjQF09Lyu7lpb9mU"
      },
      "Export": {
        "Name": "sls-aws-lmabda-authorizer-dev-PutDynamoLambdaFunctionQualifiedArn"
      }
    },
    "AuthorizerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AuthorizerLambdaVersionIFe963PvO1B35ng97VVynPpTJSchnWBZZrlKWOTAU"
      },
      "Export": {
        "Name": "sls-aws-lmabda-authorizer-dev-AuthorizerLambdaFunctionQualifiedArn"
      }
    },
    "DeleteDynamoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteDynamoLambdaVersionemkYR7SocJJR6ZeekzHY8pqkpH862yyGD6PCnt2sI"
      },
      "Export": {
        "Name": "sls-aws-lmabda-authorizer-dev-DeleteDynamoLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-aws-lmabda-authorizer-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-aws-lmabda-authorizer-dev-HttpApiUrl"
      }
    }
  }
}